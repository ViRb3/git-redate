#!/usr/bin/env bash

die() {
    echo >&2 "$(basename "$0"): $*"
    exit 1
}

is_git_repo() {
    if ! git rev-parse --show-toplevel >/dev/null 2>&1; then
        die 'Not a git repo!'
    fi
}

is_git_repo

make_editor_choice() {
    echo "Which text editor do you want to use for git-redate?"
    echo "1. vi"
    echo "2. nano"
    echo "3. <custom>"
    echo "Your choice (1-3): "

    read -r -d'' -s -n1 CHOOSE_EDITOR
}

get_editor_executable() {
    echo "What is the path to your text editor?"
    read -r EDITOR_PATH
}

is_has_editor() {
    SETTINGS_FILE=~"/.redate-settings"
    if [ -f "$SETTINGS_FILE" ]; then
        OUR_EDITOR=$(cat "$SETTINGS_FILE")
    elif [ -n "$EDITOR" ]; then
        OUR_EDITOR="$EDITOR"
    else
        make_editor_choice
        if [ "$CHOOSE_EDITOR" == 3 ] || [ "$CHOOSE_EDITOR" == "3" ]; then
            get_editor_executable
            OUR_EDITOR="$EDITOR_PATH"
        elif [ "$CHOOSE_EDITOR" == 1 ] || [ "$CHOOSE_EDITOR" == "1" ]; then
            OUR_EDITOR="vi"
        else
            OUR_EDITOR="nano"
        fi
        echo "$OUR_EDITOR" >"$SETTINGS_FILE"
    fi
}

is_has_editor

ALL=0
DEBUG=0
LOG_FILTER=""
REBASE_REF="--root"
COMMIT_ARGS=""
LOG_OUT_PATTERN="error"

while [[ $# -ge 1 ]]; do
    key="$1"

    case $key in
    -c | --commits)
        COMMITS="${2:-5}"
        shift
        ;;
    -u | --user)
        LOG_FILTER="$LOG_FILTER --author=$(git config --get user.email)"
        shift
        ;;
    -d | --debug)
        DEBUG=1
        LOG_OUT_PATTERN=""
        ;;
    -a | --all)
        ALL=1
        ;;
    *)
        COMMIT_ARGS="$COMMIT_ARGS $key"
        # unknown option
        ;;
    esac
    shift
done

COMMITS_FILE=$(mktemp /tmp/git_redate-XXXX)
[ -f "$COMMITS_FILE" ] || die "could not get COMMITS_FILE=[$COMMITS_FILE]"

LOG_FILE=$(mktemp "$COMMITS_FILE.log")
[ -f "$LOG_FILE" ] || die "could not get LOG_FILE=[$LOG_FILE]"

if [ "$DEBUG" -eq 0 ]; then
    trap "rm -f '$COMMITS_FILE'; rm -f '$LOG_FILE'" EXIT
fi

if [ "${ALL}" -eq 0 ]; then
    LOG_FILTER="$LOG_FILTER -n ${COMMITS:-5}"
    REBASE_REF="HEAD~${COMMITS:-5}"
fi

git log $LOG_FILTER --date=iso-strict-local --pretty=format:"%ad | %cd | %H | %s" >"$COMMITS_FILE"

eval "${OUR_EDITOR:-${VISUAL:-${EDITOR}}}" "$COMMITS_FILE"

read -r -d '' REDATE_EXEC <<EOM
export GIT_AUTHOR_DATE=\$(tail -1 '$COMMITS_FILE' | awk -F "|" '{ print \$1 }')
export GIT_COMMITTER_DATE=\$(tail -1 '$COMMITS_FILE' | awk -F "|" '{ print \$2 }')
commit_hash=\$(tail -1 '$COMMITS_FILE' | awk -F "|" '{ print \$3 }')
grep -vF "\$commit_hash" '$COMMITS_FILE' >'$COMMITS_FILE.tmp'
mv '$COMMITS_FILE.tmp' '$COMMITS_FILE'
git commit --date="\$GIT_AUTHOR_DATE" --amend --allow-empty --no-edit -n $COMMIT_ARGS
EOM

echo "Rebase ref: $REBASE_REF" >>"$LOG_FILE"
git rebase --exec "$(echo "$REDATE_EXEC" | tr '\n' ';')" "$REBASE_REF" >>"$LOG_FILE" 2>&1

RESULT=$?

grep -F "$LOG_OUT_PATTERN" <"$LOG_FILE"

if [ $RESULT -eq 0 ]; then
    echo "Git commit dates updated."
else
    echo "Git redate failed. Please make sure you run this on a clean working directory."
fi

exit $RESULT
